{"version":3,"sources":["chat/Components/HomePage.js","chat/Utils/validation.js","chat/DAL/authenticationApi.js","chat/Components/Register.js","chat/Components/AuthContext.js","chat/Components/Login.js","chat/Utils/function.js","chat/Components/Bar.js","chat/Components/ForgotPassword.js","chat/Components/ResetPassword.js","chat/Components/Loader.js","chat/Components/Initialization.js","chat/DAL/roomsApi.js","chat/Components/CreateRoom.js","chat/Components/CardRoom.js","chat/Components/Rooms.js","chat/Components/Room.js","chat/index.js","reportWebVitals.js","chat/Redux/store.js","index.js"],"names":["HomePage","Container","className","validation","inputsDetails","formType","value","name","newErrors","inValid","validations","trim","required","push","pattern","test","appropriateError","errors","length","userName","email","password","confirmPassword","roomName","baseUrl","register","user","a","fetch","method","credentials","headers","body","JSON","stringify","response","loginUser","updateTokens","inMemoryToken","json","sendEmailToResetPassword","changePassword","reset","cardentials","Register","useState","errorMessage","setErrorMessage","validMessage","setValidMessage","error","registerInputsDetails","setRegisterInputsDetails","e","key","preventDefault","isValid","message","ok","setTimeout","Form","Row","Col","xs","md","lg","Group","Control","id","type","isInvalid","placeholder","onBlur","target","map","index","Feedback","Button","variant","onClick","submit","AuthContext","createContext","refreshToken","AuthContextProvider","children","history","useHistory","dispatch","useDispatch","Provider","getRefreshToken","token","decode","jwt","accessToken","exp","iat","MINUTE","Login","ctx","useContext","login","setMessage","loginInputDetails","setLoginInputDetails","to","decodeJwtToken","date","DateTime","slice","split","reverse","join","Bar","isLoggedIn","useSelector","state","toLogout","logoutUser","Navbar","collapseOnSelect","expand","bg","Toggle","Collapse","Nav","ForgotPassword","emailToResetPassword","setEmailToResetPassword","ResetPassword","useParams","resetPassword","setResetPassword","Loader","Spinner","animation","Initialization","useEffect","createNewRoom","room","getRooms","getMessges","skip","getUsers","messagesChanged","CreateRoom","roomDetails","setRoomDetails","CardRoom","admin","Rooms","socket","rooms","setRooms","searchRoom","setSearchRoom","spinner","setSpinner","timeToOpreate","search","clearTimeout","onChange","icon","faSearch","size","morePagination","Room","messagesEndRef","useRef","useLocation","isLoading","setIsLoading","usersRoom","setUsersRoom","bottom","setBottom","messages","setMessages","getListUsers","users","getMoreMessages","lastData","nextMessages","viewedMessages","view","_id","filter","undefined","emit","changeMessagesViewed","current","scrollIntoView","scrollToBottom","io","off","on","text","prev","messagesId","includes","hasMore","loadMore","loadArea","ref","rows","App","loader","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialStates","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1acbc5c3.chunk.js","sourcesContent":["import {Container} from \"react-bootstrap\"\r\n\r\n\r\nfunction HomePage(){\r\n\r\n    return <>\r\n        <Container>\r\n            <h1 className=\"header text-center\">Chat Application</h1>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <div className=\"welcome-msg\">\r\n                    <p>Welcome, to get started you need to log in,\r\n                    if you have not yet registered you must\r\n                    register for the site.</p>\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default HomePage","\r\nfunction validation({value,name},inputsDetails, formType){\r\n\r\n    const newErrors = []\r\n    let inValid = false\r\n    const {validations} = inputsDetails[name]\r\n\r\n    if(name===\"userName\" || name === \"email\" || name===\"roomName\"){\r\n        value = value.trim()\r\n    }\r\n    \r\n    if(validations.required && !value){\r\n      newErrors.push(`נדרש - ${inputsDetails[name].name}`)\r\n      inValid = true\r\n    }\r\n\r\n    if(validations.pattern && !validations.pattern.test(value)){\r\n          newErrors.push(`${inputsDetails[name].name} - ${inputsDetails[name].appropriateError}`)\r\n          inValid = true\r\n    }\r\n\r\n    if(name===\"confirmPassword\" && inputsDetails[\"password\"].value !== value){\r\n        newErrors.push(\"אין התאמה לסיסמא שנבחרה\")\r\n        inValid = true\r\n    }\r\n\r\n\r\n    if((formType === \"register\" || formType === \"resetPassword\") && name === \"password\" && inputsDetails[\"confirmPassword\"].value && inputsDetails[\"confirmPassword\"].value !== value && inputsDetails[\"confirmPassword\"].errors.length === 0){\r\n        inputsDetails[\"confirmPassword\"].errors.push(\"אין התאמה לסיסמא שנבחרה\")\r\n        inputsDetails[\"confirmPassword\"].inValid = true\r\n\r\n    } else if((formType === \"register\" || formType === \"resetPassword\") && name === \"password\" && inputsDetails[\"confirmPassword\"].value && inputsDetails[\"confirmPassword\"].value === value){\r\n        inputsDetails[\"confirmPassword\"].errors = []\r\n        inputsDetails[\"confirmPassword\"].inValid = false\r\n    }\r\n    \r\n    inputsDetails[name].inValid = inValid\r\n    inputsDetails[name].value = value\r\n    inputsDetails[name].errors = newErrors\r\n\r\n   return  {...inputsDetails}\r\n\r\n}\r\n\r\n// validation objects to form\r\n\r\nconst userName = {\r\n    value: '',\r\n    name:\"שם משתמש\",\r\n    inValid:false,\r\n    appropriateError:\"אותיות וספרות בלבד\",\r\n    errors:[], \r\n    validations:{\r\n        required: true, \r\n        pattern: /^[a-zA-Z0-9 \\u0590-\\u05fe]+$/i\r\n    }\r\n}\r\n\r\nconst email = {\r\n    value: '',\r\n    name:\"דואר אלקטרוני\",\r\n    inValid:false,\r\n    appropriateError:\"לא תקין\", \r\n    errors:[], \r\n    validations:{\r\n        required: true, \r\n        pattern: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/ \r\n    }\r\n} \r\n\r\nconst password = {\r\n    value: '',\r\n    name:\"סיסמא\",\r\n    inValid:false,\r\n    appropriateError:\"לפחות 6 תווים עם אות (אנגלית) וספרה\",\r\n    errors:[], \r\n    validations:{\r\n        required: true, \r\n        pattern: /^(?=.*[a-zA-Z])(?=.*[0-9])(?=.{6,})/ \r\n    }\r\n}\r\n\r\nconst confirmPassword = {\r\n    value: '',\r\n    name:\"אימות סיסמא\",\r\n    inValid:false,\r\n    errors:[], \r\n    validations:{\r\n        required: true, \r\n    }\r\n}\r\n\r\nconst roomName = {\r\n    value: '',\r\n    name:\"שם חדר\",\r\n    inValid:false,\r\n    appropriateError:\"אותיות (אנגלית) וספרות\",\r\n    errors:[], \r\n    validations:{\r\n        required: true,\r\n        pattern: /^[a-zA-Z0-9 ]+$/i \r\n    }\r\n}\r\n\r\nconst roomType = {\r\n    value: '',\r\n    name:\"סוג חדר\",\r\n    inValid:false,\r\n    errors:[], \r\n    validations:{\r\n        required: true, \r\n    }\r\n}\r\n\r\n\r\nexport {validation, userName, email, password, confirmPassword, roomName, roomType}","// import { inMemoryToken } from \"../Components/AuthContext\"\r\nconst baseUrl = \"http://localhost:3100/api\"\r\n\r\n\r\nasync function register(user){\r\n    const response = await fetch(`${baseUrl}/users/register`, {\r\n        method:'POST', \r\n        credentials: 'include',\r\n        headers:{'Content-Type': 'application/json'}, \r\n        body: JSON.stringify(user)\r\n    })\r\n    return response\r\n}\r\n\r\nasync function loginUser(user){\r\n    const response = await fetch(`${baseUrl}/users/login`,{\r\n        method: 'POST', \r\n        credentials: 'include',\r\n        headers:{'Content-Type': 'application/json'}, \r\n        body: JSON.stringify(user)\r\n    })\r\n    return response\r\n}\r\n\r\n\r\nasync function updateTokens(inMemoryToken){\r\n    const response = await fetch(`${baseUrl}/refreshToken`, {\r\n        method: 'POST', \r\n        credentials: 'include',\r\n        headers:{'Content-Type': 'application/json', \r\n                 'authorization': `Bearer ${inMemoryToken}`}\r\n    })\r\n    return response.json()\r\n}\r\n\r\n\r\nasync function logoutUser(){\r\n    fetch(`${baseUrl}/users/logout`,{\r\n        method: 'POST', \r\n        credentials: 'include', \r\n        headers:{'Content-Type': 'application/json'}\r\n    }) \r\n} \r\n\r\n\r\nasync function sendEmailToResetPassword(email){\r\n    const response = await fetch(`${baseUrl}/email/resetPassword`, {\r\n        method: 'POST', \r\n        credentials: 'include',\r\n        headers: {'Content-Type': 'application/json'}, \r\n        body: JSON.stringify(email)\r\n    })\r\n    return response.json()\r\n}\r\n\r\n\r\n\r\nasync function changePassword(reset){\r\n    const response = await fetch(`${baseUrl}/users/changePassword`, {\r\n        method: 'PUT', \r\n        cardentials: 'include',\r\n        headers:{'Content-type': 'application/json'},\r\n        body: JSON.stringify(reset)\r\n    })\r\n    return response\r\n}\r\n\r\n\r\nexport {register, loginUser, updateTokens, logoutUser, sendEmailToResetPassword, changePassword}","import {Form, Button, Row, Col, Container} from \"react-bootstrap\"\r\nimport {useState} from \"react\"\r\nimport {validation, userName, email, password, confirmPassword} from \"../Utils/validation\"\r\nimport {register} from \"../DAL/authenticationApi\"\r\n\r\nfunction Register(){\r\n\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [validMessage, setValidMessage] = useState(\"\")\r\n    const [registerInputsDetails, setRegisterInputsDetails] = useState({ \r\n        userName,\r\n        email: {...email, inValid: false, value: \"\", error: []},\r\n        password: {...password, inValid: false, value: \"\", error: []},\r\n        confirmPassword: {...confirmPassword, inValid: false, value: \"\", error: []}\r\n        })\r\n\r\n    async function submit(e){\r\n        e.preventDefault()\r\n\r\n        let isValid = true\r\n        let user = {}\r\n\r\n       for (const key in registerInputsDetails) {\r\n\r\n            user[key] = registerInputsDetails[key].value\r\n            setRegisterInputsDetails(validation({value:registerInputsDetails[key].value,name:key},registerInputsDetails, \"register\"))\r\n            if (registerInputsDetails[key].errors.length !==0){\r\n                isValid = false\r\n            }\r\n        }\r\n\r\n        if(isValid){\r\n            const response = await register(user)\r\n            const {message} = await response.json()\r\n            if(response.ok){\r\n                setValidMessage(message)\r\n            } else {\r\n                setErrorMessage(message)\r\n                setTimeout(()=>{\r\n                    setErrorMessage(\"\")\r\n                }, 4500)\r\n            }     \r\n        }\r\n    }\r\n\r\n\r\n    return<>\r\n        <Container className=\"container-base mt-4\">\r\n            <Form className=\"form-base\"> \r\n\r\n                {!validMessage&&\r\n                <Row className=\"justify-content-center\">\r\n                    <h1 className=\"text-center mt-3 mb-4\">Register</h1>\r\n\r\n                    <Col xs={10} md={8} lg={5}>\r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control id=\"userName\" type=\"text\" name=\"userName\" isInvalid={registerInputsDetails[\"userName\"].inValid} placeholder=\"Username\"\r\n                            onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                            {registerInputsDetails[\"userName\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n\r\n                \r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"email\" name=\"email\" isInvalid={registerInputsDetails[\"email\"].inValid} placeholder=\"Email\"\r\n                            onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                            {registerInputsDetails[\"email\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n                    </Col>\r\n                \r\n                    <Col xs={10} md={8} lg={5}>  \r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"password\" name=\"password\" isInvalid={registerInputsDetails[\"password\"].inValid} placeholder=\"Password\"\r\n                            onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                            {registerInputsDetails[\"password\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n                \r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"password\" name=\"confirmPassword\" isInvalid={registerInputsDetails[\"confirmPassword\"].inValid} placeholder=\"Confirm password\"\r\n                            onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                            {registerInputsDetails[\"confirmPassword\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n            \r\n                    </Col>\r\n\r\n                    <div className=\"text-center\">\r\n                            <Button className=\"btn-base mb-3\" variant=\"dark\" type=\"submit\" onClick={(e)=>submit(e)}>\r\n                                Register\r\n                            </Button>\r\n                    </div>\r\n\r\n                    <Row className=\"message-base justify-content-center align-items-center\">\r\n                    {errorMessage&&<small>{errorMessage}</small>}\r\n                    </Row>\r\n                    \r\n                </Row>}\r\n\r\n\r\n                {validMessage&&\r\n                <Row className=\"valid-register\">\r\n                    <h1 className=\"register-valid-message-header mt-4 text-center\">{validMessage}</h1>\r\n                    <h4 className=\"register-valid-message-confirm text-center\">In order to complete the sign-up process, please click the confirmation link in your inbox</h4>\r\n                </Row>}\r\n                \r\n            </Form>\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default Register","import jwt from \"jsonwebtoken\"\r\nimport {createContext} from \"react\"; \r\nimport {useHistory} from \"react-router\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateTokens} from \"../DAL/authenticationApi\"\r\n\r\n\r\n\r\nconst MINUTE = 60 \r\nlet inMemoryToken = \"\"\r\n\r\n\r\n\r\nconst AuthContext = createContext({\r\n    refreshToken: () => {}\r\n}); \r\n\r\n\r\n\r\nfunction AuthContextProvider({children}){\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = () => {\r\n        dispatch({type: 'LOGOUT'})\r\n    }\r\n    \r\n    \r\n    function getRefreshToken(token){\r\n        inMemoryToken = token\r\n\r\n        const decode = jwt.decode(token)\r\n        setTimeout(async () => {\r\n            const {accessToken} = await updateTokens(inMemoryToken)\r\n            if(accessToken) {\r\n                getRefreshToken(accessToken)\r\n            } else {\r\n                logout()\r\n                history.push('/login')\r\n            }\r\n    \r\n        }, (decode.exp - decode.iat - MINUTE*3)*1000)  \r\n    }\r\n\r\n\r\n    return <>\r\n        <AuthContext.Provider value = {{refreshToken: getRefreshToken}}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    </>\r\n}\r\n\r\nexport  {AuthContext, AuthContextProvider, inMemoryToken}","import {Form, Button, Row, Col, Container} from \"react-bootstrap\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {useState, useContext} from \"react\"\r\nimport {useHistory} from \"react-router\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {validation, email, password} from \"../Utils/validation\"\r\nimport {loginUser} from \"../DAL/authenticationApi\"\r\nimport {AuthContext} from \"../Components/AuthContext\"\r\n\r\n\r\nfunction Login(){\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const ctx = useContext(AuthContext)\r\n\r\n    const login = () => {\r\n        dispatch({type: 'LOGIN'})\r\n    }\r\n\r\n    const [message, setMessage] = useState(\"\")\r\n    const [loginInputDetails, setLoginInputDetails] = useState({\r\n        email: {...email, inValid: false, value: \"\", error: []},\r\n        password: {...password, inValid: false, value: \"\", error: []}\r\n        })\r\n\r\n        async function submit(e){\r\n            e.preventDefault()\r\n    \r\n            let isValid = true\r\n            let user = {}\r\n    \r\n           for (const key in loginInputDetails) {\r\n    \r\n                user[key] = loginInputDetails[key].value\r\n                setLoginInputDetails(validation({value:loginInputDetails[key].value,name:key},loginInputDetails, \"login\"))\r\n                if (loginInputDetails[key].errors.length !==0){\r\n                    isValid = false\r\n                }\r\n            }\r\n    \r\n            if(isValid){\r\n                const response = await loginUser(user)\r\n                const {accessToken, message} = await response.json()\r\n                setMessage(message)\r\n\r\n                if(response.ok){\r\n                    setTimeout(()=>{\r\n                        ctx.refreshToken(accessToken)\r\n                        login()\r\n                        history.push('/rooms')\r\n                    }, 2000)\r\n                    \r\n                } else {\r\n                    setTimeout(()=>{\r\n                        setMessage(\"\")\r\n                    }, 5000)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    return <>\r\n        <Container className=\"container-base mt-4\">\r\n            <Form className=\"form-base\"> \r\n                \r\n                <h1 className=\"text-center mt-3 mb-4\">Login</h1>\r\n                \r\n                <Row className=\"justify-content-center\">\r\n\r\n                    <Col xs={11} md={8} lg={6}>\r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"email\" name=\"email\" isInvalid={loginInputDetails[\"email\"].inValid} placeholder=\"Email\"\r\n                            onBlur={(e)=>{setLoginInputDetails(validation(e.target,loginInputDetails, \"login\"))}}/>\r\n                            {loginInputDetails[\"email\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"password\" name=\"password\" isInvalid={loginInputDetails[\"password\"].inValid} placeholder=\"Password\"\r\n                            onBlur={(e)=>{setLoginInputDetails(validation(e.target,loginInputDetails, \"login\"))}}/>\r\n                            {loginInputDetails[\"password\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n\r\n                        <Row className=\"btn-link-base mb-3\">\r\n                            <Button className=\"btn-login\" variant=\"dark\" type=\"submit\" onClick={(e)=>{submit(e)}}>\r\n                                Login\r\n                            </Button> \r\n                            <Link className=\"link-forgot text-center\" to=\"/forgotPassword\">Forgot Password ?</Link>\r\n                        </Row>\r\n                       \r\n                    </Col>\r\n\r\n                    <Row className=\"message-base justify-content-center align-items-center mb-3\">\r\n                        {message&&<small>{message}</small>}\r\n                    </Row>\r\n\r\n                </Row>\r\n                \r\n            </Form>\r\n        </Container>\r\n        \r\n    </>\r\n}\r\n\r\nexport default Login","import { inMemoryToken } from \"../Components/AuthContext\";\r\nimport jwt from \"jsonwebtoken\"\r\n\r\nfunction decodeJwtToken(){\r\n    return jwt.decode(inMemoryToken)\r\n}\r\n\r\n\r\nfunction date(DateTime){\r\n\r\n    let date\r\n    let time\r\n\r\n        date = DateTime.slice(0,10).split(\"-\").reverse().join(\"/\")\r\n        time = DateTime.slice(11,16)\r\n\r\n    return time +\" \"+date\r\n}\r\n\r\n\r\nexport {decodeJwtToken, date}\r\n","import {Navbar, Nav} from \"react-bootstrap\"\r\nimport {NavLink, useHistory} from \"react-router-dom\"\r\nimport { useSelector, useDispatch} from \"react-redux\"\r\nimport {logoutUser} from \"../DAL/authenticationApi\"\r\nimport {decodeJwtToken} from \"../Utils/function\"\r\n\r\nfunction Bar(){\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector(state => state.isLoggedIn)\r\n    \r\n    if(isLoggedIn){\r\n        var {userName} = decodeJwtToken()\r\n    }\r\n    \r\n    const logout = () => {\r\n        dispatch({type: 'LOGOUT'})\r\n    }\r\n\r\n\r\n    function toLogout(){\r\n        logout()\r\n        history.push('/')\r\n        logoutUser()\r\n    }\r\n\r\n    return <>\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" className=\"Nav-Bar\">\r\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\r\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                {!isLoggedIn&&<Nav>\r\n                    <NavLink to=\"/register\" className=\"nav-link nav-auth\">Register</NavLink>\r\n                    <NavLink to=\"/login\" className=\"nav-link nav-auth\">Login</NavLink>\r\n                </Nav>}\r\n\r\n                {isLoggedIn&&<Navbar.Collapse className=\"link-rooms\">\r\n                    <Nav>\r\n                        <NavLink to=\"/rooms\" className=\"nav-link nav-auth\">Chat Rooms</NavLink>\r\n                        <NavLink to=\"/createRoom\" className=\"nav-link nav-auth\">Create Room</NavLink>\r\n                    </Nav>\r\n                    <Nav className=\"\">\r\n                        <div className=\"userName-nav\"><b>Hello, {userName}</b></div>\r\n                        <NavLink to=\"/\" className=\"nav-link nav-auth\" onClick = {()=>toLogout()}>Logout</NavLink>\r\n                    </Nav>\r\n                </Navbar.Collapse>}\r\n            </Navbar.Collapse>\r\n\r\n    </Navbar>\r\n    </>\r\n}\r\n\r\nexport default Bar","import {Form, Button, Row, Col, Container} from \"react-bootstrap\"\r\nimport {useState} from \"react\"\r\nimport { email ,validation} from \"../Utils/validation\"\r\nimport {sendEmailToResetPassword} from \"../DAL/authenticationApi\"\r\n\r\nfunction ForgotPassword(){\r\n\r\n    email.inValid = false \r\n    email.errors = [] \r\n    \r\n    const [emailToResetPassword, setEmailToResetPassword] = useState({\r\n          email: {...email, inValid: false, value: \"\", error: []}\r\n        })\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n\r\n    async function submit(e){\r\n        e.preventDefault()\r\n        let isValid = true\r\n\r\n        setEmailToResetPassword(validation({value:emailToResetPassword[\"email\"].value, name:\"email\"}, emailToResetPassword, \"forgotPassword\"))\r\n        if (emailToResetPassword[\"email\"].errors.length !==0){\r\n            isValid = false\r\n        }\r\n        \r\n        if(isValid){\r\n            const {message} = await sendEmailToResetPassword({email: emailToResetPassword[\"email\"].value})\r\n            setMessage(message)\r\n            setTimeout(()=>{\r\n                setMessage(\"\")\r\n            },4000)\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Container className=\"container-base mt-4\">\r\n            <Form className=\"form-base\"> \r\n                \r\n                <h1 className=\"text-center mt-3 mb-4\">Forgot Password</h1>\r\n                <Row className=\"justify-content-center\">\r\n\r\n                    <Col xs={11} md={8} lg={6}>\r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"email\" name=\"email\" isInvalid={emailToResetPassword[\"email\"].inValid} placeholder=\"Email\"\r\n                            onBlur={(e)=>{setEmailToResetPassword(validation(e.target,emailToResetPassword, \"forgotPassword\"))}}/>\r\n                            {emailToResetPassword[\"email\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n\r\n\r\n                        <div className=\"text-center\">\r\n                            <Button className=\"btn-base mb-3\" variant=\"dark\" type=\"submit\" onClick={(e)=>{submit(e)}}>\r\n                                Submit\r\n                            </Button>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Row className=\"message-base justify-content-center align-items-center mb-3\">\r\n                        {message&&<small>{message}</small>}\r\n                    </Row>\r\n\r\n                </Row>\r\n                \r\n            </Form>\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default ForgotPassword","import {Form, Button, Row, Col, Container} from \"react-bootstrap\"\r\nimport { useState } from \"react\"\r\nimport { useParams, useHistory } from \"react-router\"\r\nimport { confirmPassword, password, validation } from \"../Utils/validation\"\r\nimport {changePassword} from \"../DAL/authenticationApi\"\r\n\r\nfunction ResetPassword(){\r\n\r\n    let { token } = useParams()\r\n    const history = useHistory()\r\n\r\n    const [resetPassword, setResetPassword] = useState({\r\n        password: {...password, inValid: false, value: \"\", error: []}, \r\n        confirmPassword: {...confirmPassword, inValid: false, value: \"\", error: []}\r\n    })\r\n\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n\r\n    async function submit(e){\r\n        e.preventDefault()\r\n        let isValid = true\r\n            let reset = {}\r\n    \r\n           for (const key in resetPassword) {\r\n    \r\n            reset[key] = resetPassword[key].value\r\n                setResetPassword(validation({value:resetPassword[key].value,name:key},resetPassword, \"login\"))\r\n                if (resetPassword[key].errors.length !==0){\r\n                    isValid = false\r\n                }\r\n            }\r\n    \r\n            if(isValid){\r\n                reset[\"token\"] = token\r\n                const response = await changePassword(reset)\r\n                const {message} = await response.json()\r\n                setMessage(message)\r\n                if(response.ok){\r\n                    setTimeout(()=>{\r\n                        setMessage(\"\")\r\n                        history.push(\"/login\")\r\n                    }, 3000)\r\n                } else {\r\n                    setTimeout(()=>{\r\n                        setMessage(\"\")\r\n                    }, 3000)\r\n                }\r\n                \r\n            }\r\n    }\r\n\r\n\r\n\r\n    return <>\r\n         <Container className=\"container-base mt-4\">\r\n            <Form className=\"form-base\"> \r\n                <h1 className=\"text-center mt-3 mb-4\">Reset Password</h1>\r\n                <Row className=\"justify-content-center\">\r\n\r\n                    <Col xs={11} md={8} lg={6}>\r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"password\" name=\"password\" isInvalid={resetPassword[\"password\"].inValid} placeholder=\"Password\"\r\n                            onBlur={(e)=>{setResetPassword(validation(e.target,resetPassword, \"resetPassword\"))}}/>\r\n                            {resetPassword[\"password\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"password\" name=\"confirmPassword\" isInvalid={resetPassword[\"confirmPassword\"].inValid} placeholder=\"Confirm Password\"\r\n                            onBlur={(e)=>{setResetPassword(validation(e.target,resetPassword, \"resetPassword\"))}}/>\r\n                            {resetPassword[\"confirmPassword\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n\r\n\r\n                        <div className=\"text-center\">\r\n                            <Button className=\"btn-base mb-3\" variant=\"dark\" type=\"submit\" onClick={(e)=>submit(e)}>\r\n                                Submit\r\n                            </Button>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Row className=\"message-base justify-content-center align-items-center mb-3\">\r\n                        {message&&<small>{message}</small>}\r\n                    </Row>\r\n\r\n                </Row>\r\n            </Form>\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default ResetPassword","import {Row, Spinner} from 'react-bootstrap'\r\n\r\n\r\nfunction Loader(){\r\n    return <>\r\n        <h3 className=\" text-center mt-5\">Loading</h3>\r\n        <Row className=\"justify-content-center\">\r\n            <Spinner animation=\"border\" variant=\"dark\" />\r\n        </Row>\r\n    </>\r\n}\r\n\r\nexport default Loader","import {useEffect, useContext} from \"react\"\r\nimport {useDispatch} from \"react-redux\"\r\nimport {AuthContext} from '../Components/AuthContext'\r\nimport Loader from \"./Loader\"\r\nimport {updateTokens} from \"../DAL/authenticationApi\"\r\n\r\n\r\nfunction Initialization(){\r\n\r\n    const ctx = useContext(AuthContext)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const login = () => {\r\n        dispatch({type: 'LOGIN'})\r\n    }\r\n\r\n    const logout = () => {\r\n        dispatch({type: 'LOGOUT'})\r\n    }\r\n\r\n    const start = () => {\r\n        dispatch({type: 'START'})\r\n    }\r\n\r\n    useEffect(()=>{\r\n        (async ()=>{\r\n            const {accessToken} = await updateTokens()\r\n            if(accessToken) {\r\n                login()\r\n                ctx.refreshToken(accessToken)\r\n            } else {\r\n                logout()\r\n            }\r\n            setTimeout(()=>{\r\n                start()\r\n            }, 350)\r\n        })()\r\n    },[])\r\n\r\n    return <>\r\n        <Loader/>\r\n    </>\r\n}\r\n\r\nexport default Initialization","const baseUrl = \"http://localhost:3100/api\"\r\n\r\n\r\nasync function createNewRoom(room){\r\n    const response = await fetch(`${baseUrl}/rooms`, {\r\n        method: 'POST', \r\n        credentials: 'include', \r\n        headers: {'Content-Type': 'application/json'}, \r\n        body: JSON.stringify(room)\r\n    })\r\n    return response\r\n}\r\n\r\nasync function getRooms(roomName){\r\n    const response = await fetch(`${baseUrl}/rooms?roomName=${roomName}`)\r\n    return response.json()\r\n}\r\n\r\nasync function getMessges(id, skip){\r\n    const response = await fetch(`${baseUrl}/rooms/messages/?id=${id}&skip=${skip}`)\r\n    return response.json()\r\n}\r\n\r\nasync function getUsers(id){\r\n    const response = await fetch(`${baseUrl}/rooms/users/${id}`)\r\n    return response.json()\r\n}\r\n\r\nasync function changeMessagesViewed(messagesChanged){\r\n    const response = await fetch(`${baseUrl}/rooms/changeViewed`, {\r\n        method: 'PUT', \r\n        credentials: 'include', \r\n        headers: {'Content-Type': 'application/json'}, \r\n        body: JSON.stringify(messagesChanged)\r\n    })\r\n    return response.json()\r\n}\r\n\r\n\r\nexport {createNewRoom, getRooms, getMessges, getUsers, changeMessagesViewed}","import { useState } from \"react\"\r\nimport {Form, Row, Col, Container, Button} from \"react-bootstrap\"\r\nimport {roomName, validation} from \"../Utils/validation\"\r\nimport {createNewRoom} from \"../DAL/roomsApi\"\r\nimport {decodeJwtToken} from \"../Utils/function\"\r\nimport { useHistory } from \"react-router\"\r\n\r\nfunction CreateRoom(){\r\n\r\n    const history = useHistory()\r\n    const {id} = decodeJwtToken()\r\n\r\n\r\n    const [message, setMessage] = useState(\"\")\r\n    const [roomDetails, setRoomDetails] = useState({ \r\n        roomName,\r\n        })\r\n\r\n    async function submit(e){\r\n        e.preventDefault()\r\n\r\n        let isValid = true\r\n        let room = {}\r\n\r\n\r\n       for (const key in roomDetails) {\r\n\r\n            room[key] = roomDetails[key].value\r\n            setRoomDetails(validation({value:roomDetails[key].value,name:key},roomDetails))\r\n            if (roomDetails[key].errors.length !==0){\r\n                isValid = false\r\n            }\r\n        }\r\n\r\n        if(isValid){\r\n            room[\"admin\"] = id\r\n            const response = await createNewRoom(room)\r\n            const {message} = await response.json()\r\n            setMessage(message)\r\n\r\n            if(response.ok){\r\n                setTimeout(()=>{\r\n                    history.push('/rooms')\r\n                }, 2000)\r\n                \r\n            } else {\r\n                setTimeout(()=>{\r\n                    setMessage(\"\")\r\n                }, 4000)\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    return<>\r\n    <Container className=\"container-base mt-4\">\r\n        <Form className=\"form-base\">\r\n\r\n            <h1 className=\"text-center mt-3 mb-4\">Create Room</h1>\r\n\r\n            <Row className=\"justify-content-center mt-5 \">\r\n\r\n                <Col className=\"input-create-room\" xs={11} md={7} lg={5}>\r\n                    <Form.Group>\r\n                        <Form.Control id=\"roomName\" type=\"text\" name=\"roomName\" isInvalid={roomDetails[\"roomName\"].inValid} placeholder=\"Room Name\"\r\n                        onBlur={(e)=>{setRoomDetails(validation(e.target, roomDetails))}}/>\r\n                        {roomDetails[\"roomName\"].errors.map((value,index)=>\r\n                        {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                    </Form.Group>\r\n                </Col>\r\n\r\n                <div className=\"text-center\">\r\n                    <Button className=\"btn-base mb-3 mt-5\" variant=\"dark\" type=\"submit\" onClick={(e)=>submit(e)}>\r\n                        Create\r\n                    </Button>\r\n                </div>\r\n\r\n                <Row className=\"message-base justify-content-center align-items-center mb-3\">\r\n                    {message&&<small>{message}</small>}\r\n                </Row>\r\n\r\n            </Row>\r\n        </Form>\r\n    </Container>\r\n    </>\r\n}\r\n\r\nexport default CreateRoom","import {useHistory} from \"react-router-dom\"\r\n\r\nfunction CardRoom({room}){\r\n\r\n    const history = useHistory()\r\n\r\n    return<>\r\n        <div className=\"room-card\">\r\n            <h5 className=\"text-center\">{room.roomName}</h5>\r\n            <hr className=\"mb-4\"></hr>\r\n            <p>Admin : {room.admin.name}</p>\r\n            <p className=\"inside-room\" onClick={()=>history.push(`/room/${room.roomName}`, room)}><b>Get Inside</b></p>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\nexport default CardRoom","import { useEffect, useState } from \"react\"\r\nimport { getRooms } from \"../DAL/roomsApi\"\r\nimport { Container, Row, Col, Spinner } from \"react-bootstrap\"\r\nimport CardRoom from \"../Components/CardRoom\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction Rooms(){\r\n\r\n    const [rooms, setRooms] = useState([]) // id, roomName, admin, roomType\r\n    const [searchRoom, setSearchRoom] = useState('') // id, roomName, admin, roomType\r\n    const [spinner, setSpinner] = useState(true) // id, roomName, admin, roomType\r\n\r\n    useEffect(()=>{\r\n        const timeToOpreate = setTimeout(async()=>{\r\n            setSpinner(true)\r\n            const search = await getRooms(searchRoom)\r\n            setRooms(search)\r\n            stopSpinner()\r\n        }, 600)\r\n\r\n        return () => {\r\n            clearTimeout(timeToOpreate)\r\n        }\r\n\r\n    }, [searchRoom])\r\n\r\n\r\n    function stopSpinner(){\r\n        setTimeout(()=>{\r\n            setSpinner(false)\r\n        }, 400)\r\n    }\r\n\r\n\r\n    return <>\r\n        <h1 className =\"header text-center\">Chat Rooms</h1>\r\n        <Container>\r\n            <div className=\" mb-4 d-flex justify-content-center\">\r\n                <div className=\"search-rooms d-flex col-10 col-lg-4 col-md-6\">\r\n                    <input className=\"search-input\" type='text' placeholder=\"Search Room\" onChange={(e)=>setSearchRoom(e.target.value.trim())}></input>\r\n                    <FontAwesomeIcon icon={faSearch} className=\"icon-search\"/>\r\n                </div>\r\n            </div>\r\n\r\n            {!spinner && rooms.length !== 0 &&<Row>\r\n                {rooms.map((room, index) =>\r\n                {return <Col key={index} xs={9} md={6} lg={4} className=\"mb-3 mx-auto mx-md-0\">\r\n                    <CardRoom room = {room}/>\r\n                </Col>})}\r\n            </Row>}\r\n\r\n            {!spinner && rooms.length === 0 &&<Row>\r\n                        <h3 className=\"text-center\">No Results</h3>\r\n                    </Row>}\r\n\r\n            {spinner&&<div className=\"d-flex justify-content-center mt-5\">\r\n                        <h6 className=\"text-center\">Loading</h6>\r\n                        <Spinner animation=\"grow\" size=\"sm\" className=\"mx-2 my-auto\"/>\r\n                    </div>}\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default Rooms","import { useEffect, useState, useRef } from \"react\"\r\nimport { useLocation } from \"react-router\"\r\nimport {decodeJwtToken, date} from \"../Utils/function\"\r\nimport io from 'socket.io-client'\r\nimport { Container, Row} from \"react-bootstrap\"\r\nimport InfiniteScrollReverse from \"react-infinite-scroll-reverse\"\r\nimport {getMessges, getUsers, changeMessagesViewed} from \"../DAL/roomsApi\"\r\nimport {BiMessageDetail} from \"react-icons/bi\"\r\nimport {FaUsers} from \"react-icons/fa\"\r\nimport {BsCheck} from \"react-icons/bs\"\r\n\r\n\r\nlet socket \r\nlet morePagination = true\r\n\r\nfunction Room(){\r\n\r\n    const ENDPOINT = \"localhost:3100\"\r\n    const messagesEndRef = useRef()\r\n    const {id, userName} = decodeJwtToken()\r\n    const {state} = useLocation()\r\n\r\n    const [room, setRoom] = useState(state) // id, roomName, admin\r\n    const [name, setName] = useState(userName) // userName\r\n    const [isLoading, setIsLoading] = useState(true)\r\n\r\n    const [usersRoom, setUsersRoom] = useState([])\r\n    const [bottom, setBottom] = useState(true)\r\n    const [message, setMessage] = useState('') \r\n    const [messages, setMessages] = useState([])\r\n\r\n\r\n\r\n    const scrollToBottom = () => {\r\n      messagesEndRef.current?.scrollIntoView({})\r\n    }\r\n\r\n    useEffect(()=>{scrollToBottom()}, [bottom])\r\n  \r\n    useEffect(()=>{\r\n        getListUsers()\r\n        getMoreMessages(1)\r\n    }, [])\r\n\r\n   \r\n    useEffect(()=>{\r\n        socket = io(ENDPOINT)\r\n        socket.emit('join', {id, name, room}, ()=>{\r\n        })\r\n\r\n        return () => {\r\n            socket.emit('disconnection', {name, room}, ()=>{\r\n            })\r\n\r\n            socket.off()\r\n        }\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        socket.on('message', ({message}) => {\r\n\r\n            if(message.user === \"\" && message.text === \"\") {  // i joined\r\n                getListUsers()\r\n\r\n            } else if(message.user === \"\" && message.text !== \"\"){ //else user joined or left\r\n                getListUsers()\r\n                setMessages(messages => [ ...messages, message ])\r\n\r\n            } else{\r\n                setMessages(messages => [ ...messages, message ])\r\n                setBottom(prev => !prev) // when get new mesage the scroller go bottom\r\n            }       \r\n        })\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        socket.on('changeViewed', ({messagesChanged}) => {\r\n\r\n            const messagesId = messagesChanged.map(message => {\r\n                if(message.userName === name){\r\n                    return message.id\r\n                }\r\n            })\r\n\r\n            setMessages(messages => messages.map(message => {\r\n                if (messagesId.includes(message._id)){\r\n                    return { ...message, view: true }\r\n                } else {\r\n                    return message\r\n                }\r\n            }))\r\n        })\r\n    },[])\r\n\r\n\r\n    function sendMessage(){\r\n        if(message.trim()){\r\n            let view \r\n            usersRoom.length > 1 ? view = true : view = false\r\n            socket.emit('sendMessage', {name, room, message, view}, ()=>{\r\n            })\r\n            setMessage(\"\")\r\n        }\r\n    }\r\n\r\n    async function getListUsers(){\r\n        const users = await getUsers(room.id) \r\n        setUsersRoom(users)\r\n    }\r\n\r\n    async function getMoreMessages(skip) {\r\n        setIsLoading(true)\r\n        const {lastData, nextMessages} = await getMessges(room.id, skip-1) \r\n\r\n        setTimeout(() => {\r\n            setMessages([...nextMessages, ...messages])\r\n            setIsLoading(false)\r\n            viewedMessages(nextMessages)\r\n        }, 300)\r\n\r\n        if(lastData) {\r\n            morePagination = false\r\n        }\r\n    }\r\n\r\n    function  viewedMessages(nextMessages){\r\n        const messagesChanged = nextMessages.map((message)=>{ \r\n            if(message.user !== name && message.view === false){\r\n                message.view = true \r\n                return {id: message._id, userName: message.user }\r\n            }\r\n        }).filter(message => message !== undefined)\r\n\r\n        if(messagesChanged.length > 0){\r\n\r\n            socket.emit('changeViewedMessages', {room, messagesChanged}, ()=>{\r\n            })\r\n\r\n            changeMessagesViewed(messagesChanged)\r\n        }\r\n    }\r\n\r\n\r\n    return <>\r\n        <Container>\r\n            <Row className=\"justify-content-center mt-4\">\r\n                <div className=\"chat-header\">\r\n                    <h4 className=\"text-center mt-2\">Chat Room</h4>\r\n                </div>\r\n\r\n\r\n                <div className=\"chat-body\">\r\n                    <div className=\"chat-side-bar\">\r\n                        <div className=\"name-room\">\r\n                            <BiMessageDetail size={25} className=\"icon-msg\"/> <h6>Room Name :</h6>\r\n                        </div>\r\n\r\n                        <div className=\"header-room\">\r\n                            <h4 className=\"text-center\">{room.roomName}</h4>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className=\"name-room mb-2\">\r\n                                <FaUsers size={25} className=\"icon-msg\"/>\r\n                                 <h6>Users :</h6>\r\n                            </div>\r\n                            <div className=\"users-room\">\r\n                                {usersRoom.map((user, index)=> <p key = {index}>{user.userName}</p>)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"chat-message-textArea\">\r\n                        <InfiniteScrollReverse\r\n                        className=\"chat-messages\"\r\n                        hasMore={morePagination}\r\n                        isLoading={isLoading}\r\n                        loadMore={getMoreMessages}\r\n                        loadArea={50}\r\n                        >\r\n                            \r\n                            {messages.map((message, index)=>{\r\n                                return  <div key={index} ref = {index === messages.length-1 ? messagesEndRef : null } className={`chat-out ${message.user === name ? \"left\" : \"right\" }`}> \r\n                                            <span className={`chat-rectangle ${message.user === name ? \"my-color\" : \"other-color\" }`}>\r\n                                                {message.user&&<p className=\"chat-rectangle-name-date my-0 pt-1 pb-0\"> <span>{message.user}</span> <span>{date(message.date)}</span></p>}\r\n                                                <div className=\"d-flex justify-content-between\">\r\n                                                    <p className=\"chat-rectangle-message\">{message.text}</p>\r\n                                                    {message.user===name&&<BsCheck size = {30} className={`${message.view ? \"icon-v-view\" : \"icon-v-not-view\"} mt-0 mb-0`}/>}                                         \r\n                                                </div>\r\n                                            </span>\r\n                                        </div> \r\n                            })}\r\n                        \r\n                        </InfiniteScrollReverse>\r\n\r\n                        <div className=\"textarea-message\">\r\n                            <textarea className=\"textArea\" rows=\"2\" value={message} onChange={(e)=>setMessage(e.target.value)}/>\r\n                            <button className=\"btn-message\" variant=\"primary\" onClick = {sendMessage}>Send</button>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n\r\n\r\n                <div className=\"chat-footer\">\r\n                    <p>Admin : {room.admin.name}</p>\r\n                </div>\r\n            </Row>\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default Room","import \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport \"./CSS/index.css\"\r\nimport { Switch, Route, Redirect } from \"react-router-dom\"\r\nimport { useSelector } from \"react-redux\"\r\nimport HomePage from \"./Components/HomePage\"\r\nimport Register from \"./Components/Register\"\r\nimport Login from \"./Components/Login\"\r\nimport Bar from \"./Components/Bar\"\r\nimport ForgotPassword from \"./Components/ForgotPassword\"\r\nimport ResetPassword from \"./Components/ResetPassword\"\r\nimport Initialization from \"./Components/Initialization\"\r\nimport CreateRoom from \"./Components/CreateRoom\"\r\nimport Rooms from \"./Components/Rooms\"\r\nimport Room from \"./Components/Room\"\r\n\r\n\r\nfunction App() {\r\n  const isLoggedIn = useSelector((state) => state.isLoggedIn)\r\n  const loader = useSelector((state) => state.loader)\r\n  \r\n  if (loader) return <Initialization/>\r\n  return (\r\n    <>\r\n      <Bar />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n        {!isLoggedIn && <HomePage />}\r\n          {isLoggedIn && <Redirect to=\"/rooms\"/>}\r\n        </Route>\r\n\r\n        <Route exact path=\"/register\">\r\n          {!isLoggedIn && <Register />}\r\n          {isLoggedIn && <Redirect to=\"/\" />}\r\n        </Route>\r\n\r\n        <Route exact path=\"/login\">\r\n          {!isLoggedIn && <Login />}\r\n          {isLoggedIn && <Redirect to=\"/\" />}\r\n        </Route>\r\n\r\n        <Route exact path=\"/forgotPassword\">\r\n          {!isLoggedIn && <ForgotPassword />}\r\n          {isLoggedIn && <Redirect to=\"/\" />}\r\n        </Route>\r\n\r\n        <Route exact path=\"/resetPassword/:token\">\r\n          {!isLoggedIn && <ResetPassword />}\r\n          {isLoggedIn && <Redirect to=\"/\" />}\r\n        </Route>\r\n\r\n        <Route exact path=\"/createRoom\">\r\n          {isLoggedIn && <CreateRoom/>}\r\n          {!isLoggedIn && <Redirect to=\"/\"/>}\r\n        </Route>\r\n\r\n        <Route exact path=\"/rooms\">\r\n          {isLoggedIn && <Rooms/>}\r\n          {!isLoggedIn && <Redirect to=\"/\"/>}\r\n        </Route>\r\n\r\n        <Route exact path=\"/room/:name\">\r\n          {isLoggedIn && <Room/>}\r\n          {!isLoggedIn && <Redirect to=\"/\"/>}\r\n        </Route>\r\n\r\n        <Route path=\"*\">\r\n          <Redirect to=\"/\" />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore } from \"redux\"\r\n\r\nconst initialStates = { isLoggedIn: 0, loader: true }\r\n\r\nconst myStates = (state = initialStates, action) => {\r\n  if (action.type === \"LOGIN\") {\r\n    return {\r\n      ...state,\r\n      isLoggedIn: true,\r\n    }\r\n  }\r\n\r\n  if (action.type === \"LOGOUT\") {\r\n    return {\r\n      ...state,\r\n      isLoggedIn: false,\r\n    }\r\n  }\r\n\r\n  if (action.type === \"LOADING\") {\r\n    return {\r\n      ...state,\r\n      loader: true,\r\n    }\r\n  }\r\n\r\n  if (action.type === \"START\") {\r\n    return {\r\n      ...state,\r\n      loader: false,\r\n    }\r\n  }\r\n\r\n  return state\r\n}\r\n\r\nconst store = createStore(myStates)\r\n\r\nexport default store\r\n","import \"bootstrap/dist/css/bootstrap.min.css\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./chat/index\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { BrowserRouter as Router } from \"react-router-dom\"\nimport { Provider } from \"react-redux\"\nimport store from \"./chat/Redux/store\"\nimport { AuthContextProvider } from \"./chat/Components/AuthContext\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <AuthContextProvider>\n          <App/>\n        </AuthContextProvider>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}