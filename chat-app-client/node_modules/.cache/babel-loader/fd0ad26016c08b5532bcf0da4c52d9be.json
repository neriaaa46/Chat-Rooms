{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/\\u05E0\\u05E8\\u05D9\\u05D4/Desktop/chat rooms new/chat-app-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/\\u05E0\\u05E8\\u05D9\\u05D4/Desktop/chat rooms new/chat-app-client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import jwt from\"jsonwebtoken\";import{createContext}from\"react\";import{useHistory}from\"react-router\";import{useDispatch}from\"react-redux\";import{updateTokens}from\"../DAL/authenticationApi\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var MINUTE=60;var inMemoryToken=\"\";var AuthContext=/*#__PURE__*/createContext({refreshToken:function refreshToken(){}});function AuthContextProvider(_ref){var children=_ref.children;var history=useHistory();var dispatch=useDispatch();var logout=function logout(){dispatch({type:'LOGOUT'});};function getRefreshToken(token){inMemoryToken=token;var decode=jwt.decode(token);setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$updateTokens,accessToken;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return updateTokens(inMemoryToken);case 2:_yield$updateTokens=_context.sent;accessToken=_yield$updateTokens.accessToken;if(accessToken){getRefreshToken(accessToken);}else{logout();history.push('/login');}case 5:case\"end\":return _context.stop();}}},_callee);})),(decode.exp-decode.iat-MINUTE*3)*1000);}return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(AuthContext.Provider,{value:{refreshToken:getRefreshToken},children:children})});}export{AuthContext,AuthContextProvider,inMemoryToken};","map":{"version":3,"sources":["C:/Users/נריה/Desktop/chat rooms new/chat-app-client/src/chat/Components/AuthContext.js"],"names":["jwt","createContext","useHistory","useDispatch","updateTokens","MINUTE","inMemoryToken","AuthContext","refreshToken","AuthContextProvider","children","history","dispatch","logout","type","getRefreshToken","token","decode","setTimeout","accessToken","push","exp","iat"],"mappings":"2XAAA,MAAOA,CAAAA,GAAP,KAAgB,cAAhB,CACA,OAAQC,aAAR,KAA4B,OAA5B,CACA,OAAQC,UAAR,KAAyB,cAAzB,CACA,OAAQC,WAAR,KAA0B,aAA1B,CACA,OAAQC,YAAR,KAA2B,0BAA3B,C,gGAIA,GAAMC,CAAAA,MAAM,CAAG,EAAf,CACA,GAAIC,CAAAA,aAAa,CAAG,EAApB,CAIA,GAAMC,CAAAA,WAAW,cAAGN,aAAa,CAAC,CAC9BO,YAAY,CAAE,uBAAM,CAAE,CADQ,CAAD,CAAjC,CAMA,QAASC,CAAAA,mBAAT,MAAwC,IAAVC,CAAAA,QAAU,MAAVA,QAAU,CAEpC,GAAMC,CAAAA,OAAO,CAAGT,UAAU,EAA1B,CACA,GAAMU,CAAAA,QAAQ,CAAGT,WAAW,EAA5B,CAEA,GAAMU,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACjBD,QAAQ,CAAC,CAACE,IAAI,CAAE,QAAP,CAAD,CAAR,CACH,CAFD,CAKA,QAASC,CAAAA,eAAT,CAAyBC,KAAzB,CAA+B,CAC3BV,aAAa,CAAGU,KAAhB,CAEA,GAAMC,CAAAA,MAAM,CAAGjB,GAAG,CAACiB,MAAJ,CAAWD,KAAX,CAAf,CACAE,UAAU,sEAAC,6LACqBd,CAAAA,YAAY,CAACE,aAAD,CADjC,0CACAa,WADA,qBACAA,WADA,CAEP,GAAGA,WAAH,CAAgB,CACZJ,eAAe,CAACI,WAAD,CAAf,CACH,CAFD,IAEO,CACHN,MAAM,GACNF,OAAO,CAACS,IAAR,CAAa,QAAb,EACH,CAPM,sDAAD,GASP,CAACH,MAAM,CAACI,GAAP,CAAaJ,MAAM,CAACK,GAApB,CAA0BjB,MAAM,CAAC,CAAlC,EAAqC,IAT9B,CAAV,CAUH,CAGD,mBAAO,sCACH,KAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAI,CAACG,YAAY,CAAEO,eAAf,CAA/B,UACKL,QADL,EADG,EAAP,CAKH,CAED,OAASH,WAAT,CAAsBE,mBAAtB,CAA2CH,aAA3C","sourcesContent":["import jwt from \"jsonwebtoken\"\r\nimport {createContext} from \"react\"; \r\nimport {useHistory} from \"react-router\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateTokens} from \"../DAL/authenticationApi\"\r\n\r\n\r\n\r\nconst MINUTE = 60 \r\nlet inMemoryToken = \"\"\r\n\r\n\r\n\r\nconst AuthContext = createContext({\r\n    refreshToken: () => {}\r\n}); \r\n\r\n\r\n\r\nfunction AuthContextProvider({children}){\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = () => {\r\n        dispatch({type: 'LOGOUT'})\r\n    }\r\n    \r\n    \r\n    function getRefreshToken(token){\r\n        inMemoryToken = token\r\n\r\n        const decode = jwt.decode(token)\r\n        setTimeout(async () => {\r\n            const {accessToken} = await updateTokens(inMemoryToken)\r\n            if(accessToken) {\r\n                getRefreshToken(accessToken)\r\n            } else {\r\n                logout()\r\n                history.push('/login')\r\n            }\r\n    \r\n        }, (decode.exp - decode.iat - MINUTE*3)*1000)  \r\n    }\r\n\r\n\r\n    return <>\r\n        <AuthContext.Provider value = {{refreshToken: getRefreshToken}}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    </>\r\n}\r\n\r\nexport  {AuthContext, AuthContextProvider, inMemoryToken}"]},"metadata":{},"sourceType":"module"}