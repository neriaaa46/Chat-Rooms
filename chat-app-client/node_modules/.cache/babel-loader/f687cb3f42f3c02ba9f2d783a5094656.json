{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05E0\\u05E8\\u05D9\\u05D4\\\\Desktop\\\\web-socket-app\\\\chat-app-client\\\\src\\\\chat\\\\Components\\\\ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Button, Row, Col, Container } from \"react-bootstrap\";\nimport { useState } from \"react\";\nimport { useParams, useHistory } from \"react-router\";\nimport { confirmPassword, password, validation } from \"../Utils/validation\";\nimport { changePassword } from \"../DAL/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ResetPassword() {\n  _s();\n\n  let {\n    token\n  } = useParams();\n  const history = useHistory();\n  const [resetPassword, setResetPassword] = useState({\n    password,\n    confirmPassword\n  });\n  const [message, setMessage] = useState(\"\");\n\n  async function submit(e) {\n    e.preventDefault();\n    let isValid = true;\n    let reset = {};\n\n    for (const key in resetPassword) {\n      reset[key] = resetPassword[key].value;\n      setResetPassword(validation({\n        value: resetPassword[key].value,\n        name: key\n      }, resetPassword, \"login\"));\n\n      if (resetPassword[key].errors.length !== 0) {\n        isValid = false;\n      }\n    }\n\n    if (isValid) {\n      reset[\"token\"] = token;\n      const response = await changePassword(reset);\n      const {\n        message\n      } = await response.json();\n      setMessage(message);\n\n      if (response.ok) {\n        setTimeout(() => {\n          setMessage(\"\");\n          history.push(\"/login\");\n        }, 3000);\n      } else {\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 3000);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"container-base mt-4\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center mt-3 mb-4\",\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-center\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: 11,\n            md: 8,\n            lg: 6,\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-reset\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"password\",\n                name: \"password\",\n                isInvalid: resetPassword[\"password\"].inValid,\n                placeholder: \"Password\",\n                onBlur: e => {\n                  setResetPassword(validation(e.target, resetPassword, \"resetPassword\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 29\n              }, this), resetPassword[\"password\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 37\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-reset\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"password\",\n                name: \"confirmPassword\",\n                isInvalid: resetPassword[\"confirmPassword\"].inValid,\n                placeholder: \"Confirm Password\",\n                onBlur: e => {\n                  setResetPassword(validation(e.target, resetPassword, \"resetPassword\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 29\n              }, this), resetPassword[\"confirmPassword\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 73,\n                  columnNumber: 37\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-reset mb-3\",\n                variant: \"dark\",\n                type: \"submit\",\n                onClick: e => submit(e),\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"message-reset justify-content-center align-items-center mb-3\",\n            children: message && /*#__PURE__*/_jsxDEV(\"small\", {\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 35\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n}\n\n_s(ResetPassword, \"NHBqJnS36bRR4eA4vlcewVzW9gg=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["C:/Users/נריה/Desktop/web-socket-app/chat-app-client/src/chat/Components/ResetPassword.js"],"names":["Form","Button","Row","Col","Container","useState","useParams","useHistory","confirmPassword","password","validation","changePassword","ResetPassword","token","history","resetPassword","setResetPassword","message","setMessage","submit","e","preventDefault","isValid","reset","key","value","name","errors","length","response","json","ok","setTimeout","push","inValid","target","map","index"],"mappings":"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","sourcesContent":["import {Form, Button, Row, Col, Container} from \"react-bootstrap\"\r\nimport { useState } from \"react\"\r\nimport { useParams, useHistory } from \"react-router\"\r\nimport { confirmPassword, password, validation } from \"../Utils/validation\"\r\nimport {changePassword} from \"../DAL/api\"\r\n\r\nfunction ResetPassword(){\r\n\r\n    let { token } = useParams()\r\n    const history = useHistory()\r\n\r\n    const [resetPassword, setResetPassword] = useState({\r\n        password, \r\n        confirmPassword\r\n    })\r\n\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n\r\n    async function submit(e){\r\n        e.preventDefault()\r\n        let isValid = true\r\n            let reset = {}\r\n    \r\n           for (const key in resetPassword) {\r\n    \r\n            reset[key] = resetPassword[key].value\r\n                setResetPassword(validation({value:resetPassword[key].value,name:key},resetPassword, \"login\"))\r\n                if (resetPassword[key].errors.length !==0){\r\n                    isValid = false\r\n                }\r\n            }\r\n    \r\n            if(isValid){\r\n                reset[\"token\"] = token\r\n                const response = await changePassword(reset)\r\n                const {message} = await response.json()\r\n                setMessage(message)\r\n                if(response.ok){\r\n                    setTimeout(()=>{\r\n                        setMessage(\"\")\r\n                        history.push(\"/login\")\r\n                    }, 3000)\r\n                } else {\r\n                    setTimeout(()=>{\r\n                        setMessage(\"\")\r\n                    }, 3000)\r\n                }\r\n                \r\n            }\r\n    }\r\n\r\n\r\n\r\n    return <>\r\n         <Container className=\"container-base mt-4\">\r\n            <Form className=\"form\"> \r\n                <h1 className=\"text-center mt-3 mb-4\">Reset Password</h1>\r\n                <Row className=\"justify-content-center\">\r\n\r\n                    <Col xs={11} md={8} lg={6}>\r\n                        <Form.Group className=\"input-reset\">\r\n                            <Form.Control type=\"password\" name=\"password\" isInvalid={resetPassword[\"password\"].inValid} placeholder=\"Password\"\r\n                            onBlur={(e)=>{setResetPassword(validation(e.target,resetPassword, \"resetPassword\"))}}/>\r\n                            {resetPassword[\"password\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n\r\n                        <Form.Group className=\"input-reset\">\r\n                            <Form.Control type=\"password\" name=\"confirmPassword\" isInvalid={resetPassword[\"confirmPassword\"].inValid} placeholder=\"Confirm Password\"\r\n                            onBlur={(e)=>{setResetPassword(validation(e.target,resetPassword, \"resetPassword\"))}}/>\r\n                            {resetPassword[\"confirmPassword\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n\r\n\r\n                        <div className=\"text-center\">\r\n                            <Button className=\"btn-reset mb-3\" variant=\"dark\" type=\"submit\" onClick={(e)=>submit(e)}>\r\n                                Submit\r\n                            </Button>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Row className=\"message-reset justify-content-center align-items-center mb-3\">\r\n                        {message&&<small>{message}</small>}\r\n                    </Row>\r\n\r\n                </Row>\r\n            </Form>\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default ResetPassword"]},"metadata":{},"sourceType":"module"}