{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05E0\\u05E8\\u05D9\\u05D4\\\\Desktop\\\\web-socket-app\\\\chat-app-client\\\\src\\\\chat\\\\Components\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport jwt from \"jsonwebtoken\";\nimport { createContext } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { useDispatch } from \"react-redux\";\nimport { updateTokens } from \"../DAL/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MINUTE = 60;\nlet inMemoryToken = \"\";\nconst AuthContext = /*#__PURE__*/createContext({\n  refreshToken: () => {}\n});\n\nfunction AuthContextProvider({\n  children\n}) {\n  _s();\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const logout = () => {\n    dispatch({\n      type: 'logout'\n    });\n  };\n\n  function getRefreshToken(token) {\n    inMemoryToken = token;\n    const decode = jwt.decode(token);\n    setTimeout(async () => {\n      const {\n        accessToken\n      } = await updateTokens(inMemoryToken);\n\n      if (accessToken) {\n        getRefreshToken(accessToken);\n      } else {\n        logout();\n        history.push('/login');\n      }\n    }, (decode.exp - decode.iat - MINUTE * 3) * 1000);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        refreshToken: getRefreshToken\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(AuthContextProvider, \"ztFVC0/0rI8de3REyGzb7ruuLNE=\", false, function () {\n  return [useHistory, useDispatch];\n});\n\n_c = AuthContextProvider;\nexport { AuthContext, AuthContextProvider, inMemoryToken };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/נריה/Desktop/web-socket-app/chat-app-client/src/chat/Components/AuthContext.js"],"names":["jwt","createContext","useHistory","useDispatch","updateTokens","MINUTE","inMemoryToken","AuthContext","refreshToken","AuthContextProvider","children","history","dispatch","logout","type","getRefreshToken","token","decode","setTimeout","accessToken","push","exp","iat"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAAQC,aAAR,QAA4B,OAA5B;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,YAAR,QAA2B,YAA3B;;;AAIA,MAAMC,MAAM,GAAG,EAAf;AACA,IAAIC,aAAa,GAAG,EAApB;AAIA,MAAMC,WAAW,gBAAGN,aAAa,CAAC;AAC9BO,EAAAA,YAAY,EAAE,MAAM,CAAE;AADQ,CAAD,CAAjC;;AAMA,SAASC,mBAAT,CAA6B;AAACC,EAAAA;AAAD,CAA7B,EAAwC;AAAA;;AAEpC,QAAMC,OAAO,GAAGT,UAAU,EAA1B;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B;;AAEA,QAAMU,MAAM,GAAG,MAAM;AACjBD,IAAAA,QAAQ,CAAC;AAACE,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACH,GAFD;;AAKA,WAASC,eAAT,CAAyBC,KAAzB,EAA+B;AAC3BV,IAAAA,aAAa,GAAGU,KAAhB;AAEA,UAAMC,MAAM,GAAGjB,GAAG,CAACiB,MAAJ,CAAWD,KAAX,CAAf;AACAE,IAAAA,UAAU,CAAC,YAAY;AACnB,YAAM;AAACC,QAAAA;AAAD,UAAgB,MAAMf,YAAY,CAACE,aAAD,CAAxC;;AACA,UAAGa,WAAH,EAAgB;AACZJ,QAAAA,eAAe,CAACI,WAAD,CAAf;AACH,OAFD,MAEO;AACHN,QAAAA,MAAM;AACNF,QAAAA,OAAO,CAACS,IAAR,CAAa,QAAb;AACH;AAEJ,KATS,EASP,CAACH,MAAM,CAACI,GAAP,GAAaJ,MAAM,CAACK,GAApB,GAA0BjB,MAAM,GAAC,CAAlC,IAAqC,IAT9B,CAAV;AAUH;;AAGD,sBAAO;AAAA,2BACH,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAI;AAACG,QAAAA,YAAY,EAAEO;AAAf,OAA/B;AAAA,gBACKL;AADL;AAAA;AAAA;AAAA;AAAA;AADG,mBAAP;AAKH;;GAhCQD,mB;UAEWP,U,EACCC,W;;;KAHZM,mB;AAkCT,SAASF,WAAT,EAAsBE,mBAAtB,EAA2CH,aAA3C","sourcesContent":["import jwt from \"jsonwebtoken\"\r\nimport {createContext} from \"react\"; \r\nimport {useHistory} from \"react-router\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateTokens} from \"../DAL/api\"\r\n\r\n\r\n\r\nconst MINUTE = 60 \r\nlet inMemoryToken = \"\"\r\n\r\n\r\n\r\nconst AuthContext = createContext({\r\n    refreshToken: () => {}\r\n}); \r\n\r\n\r\n\r\nfunction AuthContextProvider({children}){\r\n\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = () => {\r\n        dispatch({type: 'logout'})\r\n    }\r\n    \r\n    \r\n    function getRefreshToken(token){\r\n        inMemoryToken = token\r\n\r\n        const decode = jwt.decode(token)\r\n        setTimeout(async () => {\r\n            const {accessToken} = await updateTokens(inMemoryToken)\r\n            if(accessToken) {\r\n                getRefreshToken(accessToken)\r\n            } else {\r\n                logout()\r\n                history.push('/login')\r\n            }\r\n    \r\n        }, (decode.exp - decode.iat - MINUTE*3)*1000)  \r\n    }\r\n\r\n\r\n    return <>\r\n        <AuthContext.Provider value = {{refreshToken: getRefreshToken}}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    </>\r\n}\r\n\r\nexport  {AuthContext, AuthContextProvider, inMemoryToken}"]},"metadata":{},"sourceType":"module"}