{"ast":null,"code":"import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction InfiniteScrollReverse({\n  className,\n  isLoading,\n  hasMore,\n  loadArea,\n  loadMore,\n  children\n}) {\n  const infiniteRef = useRef();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [scrollPosition, setScrollPosition] = useState(0); // Reset default page, if children equals to 0\n\n  useEffect(() => {\n    if (children.length === 0) {\n      setCurrentPage(1);\n    }\n  }, [children.length]);\n  useEffect(() => {\n    let {\n      current: scrollContainer\n    } = infiniteRef;\n\n    function onScroll() {\n      // Handle scroll direction\n      if (scrollContainer.scrollTop > scrollPosition) {// Scroll bottom\n      } else {\n        // Check load more scroll area\n        if (scrollContainer.scrollTop <= loadArea && !isLoading) {\n          // Check for available data\n          if (hasMore) {\n            // Run data fetching\n            const nextPage = currentPage + 1;\n            setCurrentPage(nextPage);\n            loadMore(nextPage);\n          }\n        }\n      } // Save event scroll position\n\n\n      setScrollPosition(scrollContainer.scrollTop);\n    }\n\n    scrollContainer.addEventListener(\"scroll\", onScroll);\n    return () => {\n      scrollContainer.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [currentPage, hasMore, isLoading, loadArea, loadMore, scrollPosition]);\n  useEffect(() => {\n    let {\n      current: scrollContainer\n    } = infiniteRef;\n\n    if (children.length) {\n      // Get available top scroll\n      const availableScroll = scrollContainer.scrollHeight - scrollContainer.clientHeight; // Get motion for first page\n\n      if (currentPage === 1) {\n        // Move data to bottom for getting load more area\n        if (availableScroll >= 0) {\n          scrollContainer.scrollTop = availableScroll;\n        }\n      } else {\n        // Add scroll area for other pages\n        if (hasMore) {\n          scrollContainer.scrollTop = scrollContainer.clientHeight;\n        }\n      }\n    }\n  }, [children.length, currentPage, hasMore]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    ref: infiniteRef\n  }, children);\n}\n\nInfiniteScrollReverse.propTypes = {\n  className: PropTypes.string.isRequired,\n  children: PropTypes.array,\n  hasMore: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  loadMore: PropTypes.func.isRequired,\n  loadArea: PropTypes.number\n};\nInfiniteScrollReverse.defaultProps = {\n  className: \"InfiniteScrollReverse\",\n  children: [],\n  loadArea: 30\n};\nexport default InfiniteScrollReverse;","map":{"version":3,"sources":["C:/Users/נריה/Desktop/תיקיה חדשה/chat-app-client/node_modules/react-infinite-scroll-reverse/dist/InfiniteScrollReverse.js"],"names":["React","useEffect","useRef","useState","PropTypes","InfiniteScrollReverse","className","isLoading","hasMore","loadArea","loadMore","children","infiniteRef","currentPage","setCurrentPage","scrollPosition","setScrollPosition","length","current","scrollContainer","onScroll","scrollTop","nextPage","addEventListener","removeEventListener","availableScroll","scrollHeight","clientHeight","createElement","ref","propTypes","string","isRequired","array","bool","func","number","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction InfiniteScrollReverse({\n  className,\n  isLoading,\n  hasMore,\n  loadArea,\n  loadMore,\n  children\n}) {\n  const infiniteRef = useRef();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [scrollPosition, setScrollPosition] = useState(0); // Reset default page, if children equals to 0\n\n  useEffect(() => {\n    if (children.length === 0) {\n      setCurrentPage(1);\n    }\n  }, [children.length]);\n  useEffect(() => {\n    let {\n      current: scrollContainer\n    } = infiniteRef;\n\n    function onScroll() {\n      // Handle scroll direction\n      if (scrollContainer.scrollTop > scrollPosition) {// Scroll bottom\n      } else {\n        // Check load more scroll area\n        if (scrollContainer.scrollTop <= loadArea && !isLoading) {\n          // Check for available data\n          if (hasMore) {\n            // Run data fetching\n            const nextPage = currentPage + 1;\n            setCurrentPage(nextPage);\n            loadMore(nextPage);\n          }\n        }\n      } // Save event scroll position\n\n\n      setScrollPosition(scrollContainer.scrollTop);\n    }\n\n    scrollContainer.addEventListener(\"scroll\", onScroll);\n    return () => {\n      scrollContainer.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [currentPage, hasMore, isLoading, loadArea, loadMore, scrollPosition]);\n  useEffect(() => {\n    let {\n      current: scrollContainer\n    } = infiniteRef;\n\n    if (children.length) {\n      // Get available top scroll\n      const availableScroll = scrollContainer.scrollHeight - scrollContainer.clientHeight; // Get motion for first page\n\n      if (currentPage === 1) {\n        // Move data to bottom for getting load more area\n        if (availableScroll >= 0) {\n          scrollContainer.scrollTop = availableScroll;\n        }\n      } else {\n        // Add scroll area for other pages\n        if (hasMore) {\n          scrollContainer.scrollTop = scrollContainer.clientHeight;\n        }\n      }\n    }\n  }, [children.length, currentPage, hasMore]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    ref: infiniteRef\n  }, children);\n}\n\nInfiniteScrollReverse.propTypes = {\n  className: PropTypes.string.isRequired,\n  children: PropTypes.array,\n  hasMore: PropTypes.bool.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  loadMore: PropTypes.func.isRequired,\n  loadArea: PropTypes.number\n};\nInfiniteScrollReverse.defaultProps = {\n  className: \"InfiniteScrollReverse\",\n  children: [],\n  loadArea: 30\n};\nexport default InfiniteScrollReverse;"]},"metadata":{},"sourceType":"module"}