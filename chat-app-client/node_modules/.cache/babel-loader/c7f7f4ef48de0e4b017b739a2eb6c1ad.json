{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05E0\\u05E8\\u05D9\\u05D4\\\\Desktop\\\\web-socket-app\\\\chat-app-client\\\\src\\\\chat\\\\Components\\\\Register.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Button, Row, Col, Container } from \"react-bootstrap\";\nimport { useEffect, useState } from \"react\";\nimport { validation, userName, email, password, confirmPassword } from \"../Utils/validation\";\nimport { register } from \"../DAL/authenticationApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Register() {\n  _s();\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [validMessage, setValidMessage] = useState(\"\");\n  const [registerInputsDetails, setRegisterInputsDetails] = useState({\n    userName,\n    email: { ...email,\n      inValid: false,\n      value: \"\",\n      error: []\n    },\n    password,\n    confirmPassword\n  });\n\n  async function submit(e) {\n    e.preventDefault();\n    let isValid = true;\n    let user = {};\n\n    for (const key in registerInputsDetails) {\n      user[key] = registerInputsDetails[key].value;\n      setRegisterInputsDetails(validation({\n        value: registerInputsDetails[key].value,\n        name: key\n      }, registerInputsDetails, \"register\"));\n\n      if (registerInputsDetails[key].errors.length !== 0) {\n        isValid = false;\n      }\n    }\n\n    if (isValid) {\n      const response = await register(user);\n      const {\n        message\n      } = await response.json();\n\n      if (response.ok) {\n        setValidMessage(message);\n      } else {\n        setErrorMessage(message);\n        setTimeout(() => {\n          setErrorMessage(\"\");\n        }, 4500);\n      }\n    }\n  } // console.log(registerInputsDetails.email.inValid)\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [registerInputsDetails.email.inValid ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"invalid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 47\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"valid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 68\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"container-base mt-4\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: \"form-base\",\n        children: [!validMessage && /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center mt-3 mb-4\",\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 10,\n            md: 8,\n            lg: 5,\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-base\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                id: \"userName\",\n                type: \"text\",\n                name: \"userName\",\n                isInvalid: registerInputsDetails[\"userName\"].inValid,\n                placeholder: \"Username\",\n                onBlur: e => {\n                  setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 29\n              }, this), registerInputsDetails[\"userName\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 37\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-base\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"email\",\n                name: \"email\",\n                isInvalid: registerInputsDetails[\"email\"].inValid,\n                placeholder: \"Email\",\n                onBlur: e => {\n                  setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 29\n              }, this), registerInputsDetails[\"email\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 37\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 10,\n            md: 8,\n            lg: 5,\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-base\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"password\",\n                name: \"password\",\n                isInvalid: registerInputsDetails[\"password\"].inValid,\n                placeholder: \"Password\",\n                onBlur: e => {\n                  setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 29\n              }, this), registerInputsDetails[\"password\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 37\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-base\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"password\",\n                name: \"confirmPassword\",\n                isInvalid: registerInputsDetails[\"confirmPassword\"].inValid,\n                placeholder: \"Confirm password\",\n                onBlur: e => {\n                  setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 29\n              }, this), registerInputsDetails[\"confirmPassword\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 37\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"btn-base mb-3\",\n              variant: \"dark\",\n              type: \"submit\",\n              onClick: e => submit(e),\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"message-base justify-content-center align-items-center\",\n            children: errorMessage && /*#__PURE__*/_jsxDEV(\"small\", {\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 36\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this), validMessage && /*#__PURE__*/_jsxDEV(Row, {\n          className: \"valid-register\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"register-valid-message-header mt-4 text-center\",\n            children: validMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"register-valid-message-confirm text-center\",\n            children: \"In order to complete the sign-up process, please click the confirmation link in your inbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Register, \"rj9X36ymgMkVpDvA+Dny1reXkTs=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/Users/נריה/Desktop/web-socket-app/chat-app-client/src/chat/Components/Register.js"],"names":["Form","Button","Row","Col","Container","useEffect","useState","validation","userName","email","password","confirmPassword","register","Register","errorMessage","setErrorMessage","validMessage","setValidMessage","registerInputsDetails","setRegisterInputsDetails","inValid","value","error","submit","e","preventDefault","isValid","user","key","name","errors","length","response","message","json","ok","setTimeout","target","map","index"],"mappings":"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","sourcesContent":["import {Form, Button, Row, Col, Container} from \"react-bootstrap\"\r\nimport {useEffect, useState} from \"react\"\r\nimport {validation, userName, email, password, confirmPassword} from \"../Utils/validation\"\r\nimport {register} from \"../DAL/authenticationApi\"\r\n\r\nfunction Register(){\r\n\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [validMessage, setValidMessage] = useState(\"\")\r\n    const [registerInputsDetails, setRegisterInputsDetails] = useState({ \r\n        userName,\r\n        email: {...email, inValid: false, value: \"\", error: [] },\r\n        password,\r\n        confirmPassword\r\n        })\r\n\r\n   \r\n    \r\n    async function submit(e){\r\n        e.preventDefault()\r\n\r\n        let isValid = true\r\n        let user = {}\r\n\r\n       for (const key in registerInputsDetails) {\r\n\r\n            user[key] = registerInputsDetails[key].value\r\n            setRegisterInputsDetails(validation({value:registerInputsDetails[key].value,name:key},registerInputsDetails, \"register\"))\r\n            if (registerInputsDetails[key].errors.length !==0){\r\n                isValid = false\r\n            }\r\n        }\r\n\r\n        if(isValid){\r\n            const response = await register(user)\r\n            const {message} = await response.json()\r\n            if(response.ok){\r\n                setValidMessage(message)\r\n            } else {\r\n                setErrorMessage(message)\r\n                setTimeout(()=>{\r\n                    setErrorMessage(\"\")\r\n                }, 4500)\r\n            }     \r\n        }\r\n    }\r\n\r\n    // console.log(registerInputsDetails.email.inValid)\r\n\r\n    return<>\r\n       {registerInputsDetails.email.inValid ? <div>invalid</div> : <div>valid</div>}\r\n        <Container className=\"container-base mt-4\">\r\n            <Form className=\"form-base\"> \r\n\r\n                {!validMessage&&\r\n                <Row className=\"justify-content-center\">\r\n                    <h1 className=\"text-center mt-3 mb-4\">Register</h1>\r\n\r\n                    <Col xs={10} md={8} lg={5}>\r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control id=\"userName\" type=\"text\" name=\"userName\" isInvalid={registerInputsDetails[\"userName\"].inValid} placeholder=\"Username\"\r\n                            onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                            {registerInputsDetails[\"userName\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n\r\n                \r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"email\" name=\"email\" isInvalid={registerInputsDetails[\"email\"].inValid} placeholder=\"Email\"\r\n                            onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                            {registerInputsDetails[\"email\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n                    </Col>\r\n                \r\n                    <Col xs={10} md={8} lg={5}>  \r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"password\" name=\"password\" isInvalid={registerInputsDetails[\"password\"].inValid} placeholder=\"Password\"\r\n                            onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                            {registerInputsDetails[\"password\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n                \r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"password\" name=\"confirmPassword\" isInvalid={registerInputsDetails[\"confirmPassword\"].inValid} placeholder=\"Confirm password\"\r\n                            onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                            {registerInputsDetails[\"confirmPassword\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n            \r\n                    </Col>\r\n\r\n                    <div className=\"text-center\">\r\n                            <Button className=\"btn-base mb-3\" variant=\"dark\" type=\"submit\" onClick={(e)=>submit(e)}>\r\n                                Register\r\n                            </Button>\r\n                    </div>\r\n\r\n                    <Row className=\"message-base justify-content-center align-items-center\">\r\n                    {errorMessage&&<small>{errorMessage}</small>}\r\n                    </Row>\r\n                    \r\n                </Row>}\r\n\r\n\r\n                {validMessage&&\r\n                <Row className=\"valid-register\">\r\n                    <h1 className=\"register-valid-message-header mt-4 text-center\">{validMessage}</h1>\r\n                    <h4 className=\"register-valid-message-confirm text-center\">In order to complete the sign-up process, please click the confirmation link in your inbox</h4>\r\n                </Row>}\r\n                \r\n            </Form>\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default Register"]},"metadata":{},"sourceType":"module"}