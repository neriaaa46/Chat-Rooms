{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05E0\\u05E8\\u05D9\\u05D4\\\\Desktop\\\\web-socket-app\\\\chat-app-client\\\\src\\\\chat\\\\Components\\\\ForgotPassword.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Button, Row, Col, Container } from \"react-bootstrap\";\nimport { useState } from \"react\";\nimport { email, validation } from \"../Utils/validation\";\nimport { sendEmailToResetPassword } from \"../DAL/authenticationApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ForgotPassword() {\n  _s();\n\n  email.inValid = false;\n  email.errors = [];\n  const [emailToResetPassword, setEmailToResetPassword] = useState({\n    email\n  });\n  const [message, setMessage] = useState(\"\");\n\n  async function submit(e) {\n    e.preventDefault();\n    let isValid = true;\n    setEmailToResetPassword(validation({\n      value: emailToResetPassword[\"email\"].value,\n      name: \"email\"\n    }, emailToResetPassword, \"forgotPassword\"));\n\n    if (emailToResetPassword[\"email\"].errors.length !== 0) {\n      isValid = false;\n    }\n\n    if (isValid) {\n      const {\n        message\n      } = await sendEmailToResetPassword({\n        email: emailToResetPassword[\"email\"].value\n      });\n      setMessage(message);\n      setTimeout(() => {\n        setMessage(\"\");\n      }, 4000);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"container-base mt-4\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: \"form-base\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center mt-3 mb-4\",\n          children: \"Forgot Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-center\",\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            xs: 11,\n            md: 8,\n            lg: 6,\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-base\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"email\",\n                name: \"email\",\n                isInvalid: emailToResetPassword[\"email\"].inValid,\n                placeholder: \"Email\",\n                onBlur: e => {\n                  setEmailToResetPassword(validation(e.target, emailToResetPassword, \"forgotPassword\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 29\n              }, this), emailToResetPassword[\"email\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 46,\n                  columnNumber: 37\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-base mb-3\",\n                variant: \"dark\",\n                type: \"submit\",\n                onClick: e => {\n                  submit(e);\n                },\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"message-base justify-content-center align-items-center mb-3\",\n            children: message && /*#__PURE__*/_jsxDEV(\"small\", {\n              children: message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 35\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(ForgotPassword, \"BGJk3OWuGEDXLfXJicXgXkDI63k=\");\n\n_c = ForgotPassword;\nexport default ForgotPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"sources":["C:/Users/נריה/Desktop/web-socket-app/chat-app-client/src/chat/Components/ForgotPassword.js"],"names":["Form","Button","Row","Col","Container","useState","email","validation","sendEmailToResetPassword","ForgotPassword","inValid","errors","emailToResetPassword","setEmailToResetPassword","message","setMessage","submit","e","preventDefault","isValid","value","name","length","setTimeout","target","map","index"],"mappings":"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","sourcesContent":["import {Form, Button, Row, Col, Container} from \"react-bootstrap\"\r\nimport {useState} from \"react\"\r\nimport { email ,validation} from \"../Utils/validation\"\r\nimport {sendEmailToResetPassword} from \"../DAL/authenticationApi\"\r\n\r\nfunction ForgotPassword(){\r\n\r\n    email.inValid = false \r\n    email.errors = [] \r\n    \r\n    const [emailToResetPassword, setEmailToResetPassword] = useState({\r\n            email})\r\n    const [message, setMessage] = useState(\"\")\r\n\r\n\r\n    async function submit(e){\r\n        e.preventDefault()\r\n        let isValid = true\r\n\r\n        setEmailToResetPassword(validation({value:emailToResetPassword[\"email\"].value, name:\"email\"}, emailToResetPassword, \"forgotPassword\"))\r\n        if (emailToResetPassword[\"email\"].errors.length !==0){\r\n            isValid = false\r\n        }\r\n        \r\n        if(isValid){\r\n            const {message} = await sendEmailToResetPassword({email: emailToResetPassword[\"email\"].value})\r\n            setMessage(message)\r\n            setTimeout(()=>{\r\n                setMessage(\"\")\r\n            },4000)\r\n        }\r\n    }\r\n\r\n    return <>\r\n        <Container className=\"container-base mt-4\">\r\n            <Form className=\"form-base\"> \r\n                \r\n                <h1 className=\"text-center mt-3 mb-4\">Forgot Password</h1>\r\n                <Row className=\"justify-content-center\">\r\n\r\n                    <Col xs={11} md={8} lg={6}>\r\n                        <Form.Group className=\"input-base\">\r\n                            <Form.Control type=\"email\" name=\"email\" isInvalid={emailToResetPassword[\"email\"].inValid} placeholder=\"Email\"\r\n                            onBlur={(e)=>{setEmailToResetPassword(validation(e.target,emailToResetPassword, \"forgotPassword\"))}}/>\r\n                            {emailToResetPassword[\"email\"].errors.map((value,index)=>\r\n                            {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                        </Form.Group>\r\n\r\n\r\n                        <div className=\"text-center\">\r\n                            <Button className=\"btn-base mb-3\" variant=\"dark\" type=\"submit\" onClick={(e)=>{submit(e)}}>\r\n                                Submit\r\n                            </Button>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Row className=\"message-base justify-content-center align-items-center mb-3\">\r\n                        {message&&<small>{message}</small>}\r\n                    </Row>\r\n\r\n                </Row>\r\n                \r\n            </Form>\r\n        </Container>\r\n    </>\r\n}\r\n\r\nexport default ForgotPassword"]},"metadata":{},"sourceType":"module"}