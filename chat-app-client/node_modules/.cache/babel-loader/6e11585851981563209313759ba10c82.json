{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05E0\\u05E8\\u05D9\\u05D4\\\\Desktop\\\\web-socket-app\\\\chat-app-client\\\\src\\\\chat\\\\Components\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { updateTokens } from \"../DAL/api\";\nimport Loader from \"../Components/Loader\";\nimport jwt from \"jsonwebtoken\";\nimport { createCsrfToken } from \"../DAL/api\";\nimport Cookies from \"js-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MINUTE = 60;\nlet inMemoryToken = \"\";\nconst AuthContext = /*#__PURE__*/createContext({\n  isLoggedIn: false,\n  onLogin: () => {},\n  onLogout: () => {},\n  refreshToken: () => {}\n});\n\nfunction AuthContextProvider({\n  children\n}) {\n  _s();\n\n  const history = useHistory();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [spinner, setSpinner] = useState(true);\n  useEffect(() => {\n    (async () => {\n      const {\n        accessToken\n      } = await updateTokens();\n\n      if (accessToken) {\n        loginHandler();\n        getRefreshToken(accessToken);\n      } else {\n        logoutHandler();\n      }\n\n      setTimeout(() => {\n        setSpinner(false);\n      }, 400);\n    })();\n  }, []);\n\n  const loginHandler = () => {\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    setIsLoggedIn(false);\n  };\n\n  function getRefreshToken(token) {\n    inMemoryToken = token;\n    const decode = jwt.decode(token);\n    setTimeout(async () => {\n      const {\n        accessToken\n      } = await updateTokens(inMemoryToken);\n\n      if (accessToken) {\n        getRefreshToken(accessToken);\n      } else {\n        logoutHandler();\n        history.push('/login');\n      }\n    }, (decode.exp - decode.iat - MINUTE * 3) * 1000);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!spinner && /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        isLoggedIn,\n        onLogout: logoutHandler,\n        onLogin: loginHandler,\n        refreshToken: getRefreshToken\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 20\n    }, this), spinner && /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AuthContextProvider, \"AwZ4nSaumgxHLnmW4aB29B+7y9g=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthContextProvider;\nexport { AuthContext, AuthContextProvider, inMemoryToken };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/נריה/Desktop/web-socket-app/chat-app-client/src/chat/Components/AuthContext.js"],"names":["createContext","useState","useEffect","useHistory","updateTokens","Loader","jwt","createCsrfToken","Cookies","MINUTE","inMemoryToken","AuthContext","isLoggedIn","onLogin","onLogout","refreshToken","AuthContextProvider","children","history","setIsLoggedIn","spinner","setSpinner","accessToken","loginHandler","getRefreshToken","logoutHandler","setTimeout","token","decode","push","exp","iat"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAkD,OAAlD;AACA,SAASC,UAAT,QAA0B,cAA1B;AACA,SAAQC,YAAR,QAA2B,YAA3B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,SAAQC,eAAR,QAA8B,YAA9B;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAGA,MAAMC,MAAM,GAAG,EAAf;AACA,IAAIC,aAAa,GAAG,EAApB;AAEA,MAAMC,WAAW,gBAAGX,aAAa,CAAC;AAC9BY,EAAAA,UAAU,EAAE,KADkB;AAE9BC,EAAAA,OAAO,EAAE,MAAM,CAAE,CAFa;AAG9BC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAHY;AAI9BC,EAAAA,YAAY,EAAE,MAAM,CAAE;AAJQ,CAAD,CAAjC;;AAQA,SAASC,mBAAT,CAA6B;AAACC,EAAAA;AAAD,CAA7B,EAAwC;AAAA;;AAEpC,QAAMC,OAAO,GAAGf,UAAU,EAA1B;AACA,QAAM,CAACS,UAAD,EAAaO,aAAb,IAA8BlB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACmB,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,IAAD,CAAtC;AAGAC,EAAAA,SAAS,CAAC,MAAI;AACV,KAAC,YAAU;AAEP,YAAM;AAACoB,QAAAA;AAAD,UAAgB,MAAMlB,YAAY,EAAxC;;AACA,UAAGkB,WAAH,EAAgB;AACZC,QAAAA,YAAY;AACZC,QAAAA,eAAe,CAACF,WAAD,CAAf;AACH,OAHD,MAGO;AACHG,QAAAA,aAAa;AAChB;;AACDC,MAAAA,UAAU,CAAC,MAAI;AACXL,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAFS,EAEP,GAFO,CAAV;AAGH,KAZD;AAaH,GAdQ,EAcP,EAdO,CAAT;;AAiBA,QAAME,YAAY,GAAG,MAAI;AACrBJ,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GAFD;;AAIA,QAAMM,aAAa,GAAG,MAAI;AACtBN,IAAAA,aAAa,CAAC,KAAD,CAAb;AACH,GAFD;;AAKA,WAASK,eAAT,CAAyBG,KAAzB,EAA+B;AAC3BjB,IAAAA,aAAa,GAAGiB,KAAhB;AAEA,UAAMC,MAAM,GAAGtB,GAAG,CAACsB,MAAJ,CAAWD,KAAX,CAAf;AACAD,IAAAA,UAAU,CAAC,YAAY;AACnB,YAAM;AAACJ,QAAAA;AAAD,UAAgB,MAAMlB,YAAY,CAACM,aAAD,CAAxC;;AACA,UAAGY,WAAH,EAAgB;AACZE,QAAAA,eAAe,CAACF,WAAD,CAAf;AACH,OAFD,MAEO;AACHG,QAAAA,aAAa;AACbP,QAAAA,OAAO,CAACW,IAAR,CAAa,QAAb;AACH;AAEJ,KATS,EASP,CAACD,MAAM,CAACE,GAAP,GAAaF,MAAM,CAACG,GAApB,GAA0BtB,MAAM,GAAC,CAAlC,IAAqC,IAT9B,CAAV;AAUH;;AAED,sBAAO;AAAA,eACF,CAACW,OAAD,iBAAU,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAI;AAACR,QAAAA,UAAD;AAAaE,QAAAA,QAAQ,EAACW,aAAtB;AAAqCZ,QAAAA,OAAO,EAACU,YAA7C;AAA2DR,QAAAA,YAAY,EAACS;AAAxE,OAA/B;AAAA,gBACNP;AADM;AAAA;AAAA;AAAA;AAAA,YADR,EAIFG,OAAO,iBAAE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAJP;AAAA,kBAAP;AAMH;;GAvDQJ,mB;UAEWb,U;;;KAFXa,mB;AAyDT,SAASL,WAAT,EAAsBK,mBAAtB,EAA2CN,aAA3C","sourcesContent":["import { createContext, useState, useEffect} from \"react\"; \r\nimport { useHistory} from \"react-router\";\r\nimport {updateTokens} from \"../DAL/api\"\r\nimport Loader from \"../Components/Loader\"\r\nimport jwt from \"jsonwebtoken\"\r\nimport {createCsrfToken} from \"../DAL/api\"\r\nimport Cookies from \"js-cookie\";\r\n\r\n\r\nconst MINUTE = 60 \r\nlet inMemoryToken = \"\"\r\n\r\nconst AuthContext = createContext({\r\n    isLoggedIn: false,\r\n    onLogin: () => {},\r\n    onLogout: () => {},\r\n    refreshToken: () => {}\r\n    \r\n}); \r\n\r\nfunction AuthContextProvider({children}){\r\n\r\n    const history = useHistory()\r\n    const [isLoggedIn, setIsLoggedIn] = useState(false)\r\n    const [spinner, setSpinner] = useState(true)\r\n\r\n\r\n    useEffect(()=>{\r\n        (async ()=>{\r\n            \r\n            const {accessToken} = await updateTokens()\r\n            if(accessToken) {\r\n                loginHandler()\r\n                getRefreshToken(accessToken)\r\n            } else {\r\n                logoutHandler()\r\n            }\r\n            setTimeout(()=>{\r\n                setSpinner(false)\r\n            }, 400)\r\n        })()\r\n    },[])\r\n\r\n    \r\n    const loginHandler = ()=>{\r\n        setIsLoggedIn(true)\r\n    }\r\n\r\n    const logoutHandler = ()=>{\r\n        setIsLoggedIn(false)\r\n    }\r\n\r\n\r\n    function getRefreshToken(token){\r\n        inMemoryToken = token\r\n\r\n        const decode = jwt.decode(token)\r\n        setTimeout(async () => {\r\n            const {accessToken} = await updateTokens(inMemoryToken)\r\n            if(accessToken) {\r\n                getRefreshToken(accessToken)\r\n            } else {\r\n                logoutHandler()\r\n                history.push('/login')\r\n            }\r\n    \r\n        }, (decode.exp - decode.iat - MINUTE*3)*1000)  \r\n    }\r\n\r\n    return <>\r\n        {!spinner&&<AuthContext.Provider value = {{isLoggedIn, onLogout:logoutHandler, onLogin:loginHandler, refreshToken:getRefreshToken}}>\r\n            {children}\r\n        </AuthContext.Provider>}\r\n        {spinner&&<Loader/>}\r\n    </>\r\n}\r\n\r\nexport  {AuthContext, AuthContextProvider, inMemoryToken}"]},"metadata":{},"sourceType":"module"}