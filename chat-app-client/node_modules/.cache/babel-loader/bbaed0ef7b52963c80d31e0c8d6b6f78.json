{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u05E0\\u05E8\\u05D9\\u05D4\\\\Desktop\\\\web-socket-app\\\\chat-app-client\\\\src\\\\chat\\\\Components\\\\Register.js\",\n    _s = $RefreshSig$();\n\nimport { Form, Button, Row, Col, Container } from \"react-bootstrap\";\nimport { useState } from \"react\";\nimport { validation, firstName, lastName, email, password, confirmPassword } from \"../Utils/validation\";\nimport { register } from \"../DAL/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Register() {\n  _s();\n\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [validMessage, setValidMessage] = useState(\"\");\n  const [registerInputsDetails, setRegisterInputsDetails] = useState({\n    userName,\n    email,\n    password,\n    confirmPassword\n  });\n\n  async function submit(e) {\n    e.preventDefault();\n    let isValid = true;\n    let user = {};\n\n    for (const key in registerInputsDetails) {\n      user[key] = registerInputsDetails[key].value;\n      setRegisterInputsDetails(validation({\n        value: registerInputsDetails[key].value,\n        name: key\n      }, registerInputsDetails, \"register\"));\n\n      if (registerInputsDetails[key].errors.length !== 0) {\n        isValid = false;\n      }\n    }\n\n    if (isValid) {\n      const response = await register(user);\n      const {\n        message\n      } = await response.json();\n\n      if (response.ok) {\n        setValidMessage(message);\n      } else {\n        setErrorMessage(message);\n        setTimeout(() => {\n          setErrorMessage(\"\");\n        }, 4500);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"container-register mt-4\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        className: \"register-form\",\n        children: [!validMessage && /*#__PURE__*/_jsxDEV(Row, {\n          className: \"justify-content-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-center mt-3 mb-4\",\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 10,\n            md: 8,\n            lg: 5,\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-register\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                id: \"firstName\",\n                type: \"text\",\n                name: \"firstName\",\n                isInvalid: registerInputsDetails[\"firstName\"].inValid,\n                placeholder: \"First Name\",\n                onBlur: e => {\n                  setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 33\n              }, this), registerInputsDetails[\"firstName\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 41\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-register\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                id: \"lastName\",\n                type: \"text\",\n                name: \"lastName\",\n                isInvalid: registerInputsDetails[\"lastName\"].inValid,\n                placeholder: \"Last Name\",\n                onBlur: e => {\n                  setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 33\n              }, this), registerInputsDetails[\"lastName\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 70,\n                  columnNumber: 41\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-register\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"email\",\n                name: \"email\",\n                isInvalid: registerInputsDetails[\"email\"].inValid,\n                placeholder: \"Email\",\n                onBlur: e => {\n                  setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 33\n              }, this), registerInputsDetails[\"email\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 41\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            xs: 10,\n            md: 8,\n            lg: 5,\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-register\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"password\",\n                name: \"password\",\n                isInvalid: registerInputsDetails[\"password\"].inValid,\n                placeholder: \"Password\",\n                onBlur: e => {\n                  setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 33\n              }, this), registerInputsDetails[\"password\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 41\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"input-register\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"password\",\n                name: \"confirmPassword\",\n                isInvalid: registerInputsDetails[\"confirmPassword\"].inValid,\n                placeholder: \"Confirm password\",\n                onBlur: e => {\n                  setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 33\n              }, this), registerInputsDetails[\"confirmPassword\"].errors.map((value, index) => {\n                return /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n                  className: \"feedback\",\n                  type: \"invalid\",\n                  children: [\" \", value, \" \"]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 41\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-register mb-3\",\n                variant: \"dark\",\n                type: \"submit\",\n                onClick: e => submit(e),\n                children: \"Register\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            className: \"error-message-register justify-content-center align-items-center\",\n            children: errorMessage && /*#__PURE__*/_jsxDEV(\"small\", {\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), validMessage && /*#__PURE__*/_jsxDEV(Row, {\n          className: \"valid-register\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"register-valid-message-header mt-4 text-center\",\n            children: validMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"register-valid-message-confirm text-center\",\n            children: \"In order to complete the sign-up process, please click the confirmation link in your inbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Register, \"fhaw+c1bF6w8ZEpA/1KK24RmwvY=\");\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/Users/נריה/Desktop/web-socket-app/chat-app-client/src/chat/Components/Register.js"],"names":["Form","Button","Row","Col","Container","useState","validation","firstName","lastName","email","password","confirmPassword","register","Register","errorMessage","setErrorMessage","validMessage","setValidMessage","registerInputsDetails","setRegisterInputsDetails","userName","submit","e","preventDefault","isValid","user","key","value","name","errors","length","response","message","json","ok","setTimeout","inValid","target","map","index"],"mappings":"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","sourcesContent":["import {Form, Button, Row, Col, Container} from \"react-bootstrap\"\r\nimport {useState} from \"react\"\r\nimport {validation, firstName, lastName, email, password, confirmPassword} from \"../Utils/validation\"\r\nimport {register} from \"../DAL/api\"\r\n\r\nfunction Register(){\r\n\r\n\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n    const [validMessage, setValidMessage] = useState(\"\")\r\n    const [registerInputsDetails, setRegisterInputsDetails] = useState({ \r\n        userName,\r\n        email,\r\n        password,\r\n        confirmPassword\r\n        })\r\n\r\n\r\n    async function submit(e){\r\n        e.preventDefault()\r\n\r\n        let isValid = true\r\n        let user = {}\r\n\r\n       for (const key in registerInputsDetails) {\r\n\r\n            user[key] = registerInputsDetails[key].value\r\n            setRegisterInputsDetails(validation({value:registerInputsDetails[key].value,name:key},registerInputsDetails, \"register\"))\r\n            if (registerInputsDetails[key].errors.length !==0){\r\n                isValid = false\r\n            }\r\n        }\r\n\r\n        if(isValid){\r\n            const response = await register(user)\r\n            const {message} = await response.json()\r\n            if(response.ok){\r\n                setValidMessage(message)\r\n            } else {\r\n                setErrorMessage(message)\r\n                setTimeout(()=>{\r\n                    setErrorMessage(\"\")\r\n                }, 4500)\r\n            }     \r\n        }\r\n    }\r\n\r\n\r\n\r\n    return<>\r\n            <Container className=\"container-register mt-4\">\r\n                <Form className=\"register-form\"> \r\n\r\n                    {!validMessage&&\r\n                    <Row className=\"justify-content-center\">\r\n                        <h1 className=\"text-center mt-3 mb-4\">Register</h1>\r\n\r\n                        <Col xs={10} md={8} lg={5}>\r\n                            <Form.Group className=\"input-register\">\r\n                                <Form.Control id=\"firstName\" type=\"text\" name=\"firstName\" isInvalid={registerInputsDetails[\"firstName\"].inValid} placeholder=\"First Name\"\r\n                                onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                                {registerInputsDetails[\"firstName\"].errors.map((value,index)=>\r\n                                {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                            </Form.Group>\r\n\r\n                            <Form.Group className=\"input-register\">\r\n                                <Form.Control id=\"lastName\" type=\"text\" name=\"lastName\" isInvalid={registerInputsDetails[\"lastName\"].inValid} placeholder=\"Last Name\"\r\n                                onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                                {registerInputsDetails[\"lastName\"].errors.map((value,index)=>\r\n                                {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                            </Form.Group>\r\n                 \r\n                            <Form.Group className=\"input-register\">\r\n                                <Form.Control type=\"email\" name=\"email\" isInvalid={registerInputsDetails[\"email\"].inValid} placeholder=\"Email\"\r\n                                onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                                {registerInputsDetails[\"email\"].errors.map((value,index)=>\r\n                                {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                            </Form.Group>\r\n                        </Col>\r\n                    \r\n                        <Col xs={10} md={8} lg={5}>  \r\n                            <Form.Group className=\"input-register\">\r\n                                <Form.Control type=\"password\" name=\"password\" isInvalid={registerInputsDetails[\"password\"].inValid} placeholder=\"Password\"\r\n                                onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                                {registerInputsDetails[\"password\"].errors.map((value,index)=>\r\n                                {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                            </Form.Group>\r\n                  \r\n                            <Form.Group className=\"input-register\">\r\n                                <Form.Control type=\"password\" name=\"confirmPassword\" isInvalid={registerInputsDetails[\"confirmPassword\"].inValid} placeholder=\"Confirm password\"\r\n                                onBlur={(e)=>{setRegisterInputsDetails(validation(e.target, registerInputsDetails, \"register\"))}}/>\r\n                                {registerInputsDetails[\"confirmPassword\"].errors.map((value,index)=>\r\n                                {return <Form.Control.Feedback className=\"feedback\" key={index} type=\"invalid\"> {value} </Form.Control.Feedback>})}\r\n                            </Form.Group>\r\n                \r\n                            <div className=\"text-center\">\r\n                                <Button className=\"btn-register mb-3\" variant=\"dark\" type=\"submit\" onClick={(e)=>submit(e)}>\r\n                                    Register\r\n                                </Button>\r\n                            </div>\r\n                        </Col>\r\n                        <Row className=\"error-message-register justify-content-center align-items-center\">\r\n                        {errorMessage&&<small>{errorMessage}</small>}\r\n                        </Row>\r\n                    </Row>}\r\n\r\n\r\n                    {validMessage&&\r\n                    <Row className=\"valid-register\">\r\n                        <h1 className=\"register-valid-message-header mt-4 text-center\">{validMessage}</h1>\r\n                        <h4 className=\"register-valid-message-confirm text-center\">In order to complete the sign-up process, please click the confirmation link in your inbox</h4>\r\n                    </Row>}\r\n                    \r\n                </Form>\r\n            </Container>\r\n    </>\r\n}\r\n\r\nexport default Register"]},"metadata":{},"sourceType":"module"}